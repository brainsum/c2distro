<?php

/**
 * @file
 * Functions to support theming in the c2d_theme theme.
 */

use Drupal\block_content\BlockContentInterface;

/**
 * Implements hook_preprocess_page() for PAGE document templates.
 */
function c2d_theme_preprocess_page(array &$variables) {

  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'c2d_theme/h1.page_title_center';
  }

  if (($route_name === 'entity.contact_form.canonical') || ($route_name === 'contact.site_page')) {
    $variables['#attached']['library'][] = 'c2d_theme/entity.contact_form.canonical';

    // Temporary removed.
    // ($variables['#attached']['library'][] = 'c2d_theme/submit.loader';)
  }

  if ($route_name === 'view.news.lister_page') {
    $variables['#attached']['library'][] = 'c2d_theme/view.news.lister_page';
  }
  if ($route_name === 'view.events.lister_page') {
    $variables['#attached']['library'][] = 'c2d_theme/view.events.lister_page';
  }

  $media = \Drupal::routeMatch()->getParameter('media');
  if ($media) {
    $typeName = $media->bundle();
    if ($typeName === 'document') {
      $variables['#attached']['library'][] = 'c2d_theme/entity.media.canonical.document';
    }
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $typeName = $node->bundle();
    if ($typeName === 'page') {
      $variables['#attached']['library'][] = 'c2d_theme/entity.node.canonical.page';
    }
    if (($typeName === 'news') || ($typeName === 'event')) {
      $variables['#attached']['library'][] = 'c2d_theme/entity.node.canonical.news';
    }
  }

  $specialRoutes = [
    'system.404',
    'system.403',
    'user.login',
    'user.register',
    'user.pass',
    'entity.user.canonical',
  ];
  if (in_array($route_name, $specialRoutes)) {
    $variables['#attached']['library'][] = 'c2d_theme/special_pages';
  }

}

/**
 * Implements hook_preprocess_block().
 */
function c2d_theme_preprocess_block(&$variables) {

  $block_content = $variables['elements']['content']['#block_content'] ?? '';
  if ($block_content instanceof BlockContentInterface) {
    $block_type = $block_content->bundle();
    $variables['attributes']['class'][] = $block_type . '-block-type';
  }
  $blockId = $variables['elements']['#id'] ?? '';

  if ($variables['derivative_plugin_id'] == 'search-resources') {
    $variables['#cache']['max-age'] = 0;
  }
  if ($blockId === 'views_block__selector_cards_selector_cards_block') {
    $variables['#attached']['library'][] = 'c2d_theme/views_block__selector_cards_selector_cards_block';
  }
  if ($blockId === 'views_block__news_lister_block') {
    $variables['#attached']['library'][] = 'c2d_theme/view.news.lister_page';
    $variables['#attached']['library'][] = 'c2d_theme/views_block__news_lister_block';
  }

}

/**
 * Implements hook_preprocess().
 */
function c2d_theme_preprocess(&$vars, $hook) {

  $vars['share_url'] = \Drupal::request()->getSchemeAndHttpHost() . \Drupal::request()->getPathInfo();

}

/**
 * Implements template_preprocess_paragraph().
 */
function c2d_theme_preprocess_paragraph__cta(&$variables) {
  $variables['#attached']['library'][] = 'c2d_theme/paragraphs-base';
  $variables['#attached']['library'][] = 'c2d_theme/paragraph_cta';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add custom suggestion based on block_content type.
 */
function c2d_theme_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof BlockContentInterface) {
    $block_type_suggestions[] = 'block__block_type__' . $content['#block_content']->bundle();

    // Because block__block_content exists twice in $suggestions,
    // the suggestion arrays are reversed for further processing.
    $suggestions_rev = array_reverse($suggestions);
    $block_type_suggestions = array_reverse($block_type_suggestions);

    // Insert the block type suggestions between
    // block__block_content and the block instance-specific suggestions.
    $index = array_search('block__block_content', $suggestions_rev);
    if (is_numeric($index)) {
      array_splice($suggestions_rev, $index, 0, $block_type_suggestions);
      $suggestions = array_reverse($suggestions_rev);
    }
    // If block__block_content isn't present as a suggestion.
    else {
      $suggestions_rev = array_merge($suggestions_rev, $block_type_suggestions);
      $suggestions = array_reverse($suggestions_rev);
    }
  }
}
